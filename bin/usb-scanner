#!/bin/bash
# -*- coding: utf-8 -*-
#
#  usb-scanner
#  
#  Copyright 2019 Thomas Castleman <draugeros@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#variable pre-assignment
VERSION="2.9.1"
cache="/lib/usb-scanner"
usb_loc="$cache/usb.list"
mounted_loc="$cache/mounted.list"
mounted=$(/bin/cat $mounted_loc)
custom_add=$(/bin/cat "$cache/custom_add.list")
supported=$(/bin/cat "$cache/supported.list")
edit="$cache/edit.list"
help="usb-scanner, version $VERSION

Options:
-d, --daemon	Run usb-scanner in the background as a daemon
-h. --help		Show this help dialogue and exit
-v, --version	Print current version and exit

usb-scanner is an easy to hack to have more or less performance,
or to add support for a specific controller

To change it's performance, simply run 'sudo nano /bin/usb-scanner' and
change the number of '/bin/sleep' commands in the file

To add support (keep in may this may not work for all controllers)
run 'lsusb' with your controller hooked up, determine which line
that gets printed out is about your controller, and copy-paste the
8-digit code with a colon (:) in the middle (including the colon)
into the file $cache/custom_add.list"
#Option handling
if [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
	/bin/echo -e "\n$VERSION\n"
	exit 0
elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
	/bin/echo -e "\n$help\n"
	exit 0
elif [ "$1" == "--daemon" ] || [ "$1" == "-d" ]; then
	/bin/echo -e "\nDaemon Starting . . .\n"
	usb-scanner &
	pid="$!"
	/bin/echo -e "\nDaemon Running. Kill it with \'kill $pid\' or \"killall usb-scanner\"\n"
	exit 0
fi
#check for layout.conf file, load default layout if there is none
if [ -f $HOME/.xboxdrv/layout.conf ]; then
	#parse and load file
	contents=$(/bin/cat $HOME/.xboxdrv/layout.conf)
	LEFTANALOG_X=$(
if $(/bin/echo "$contents" | /bin/grep -q "LEFT_ANALOG"); then
	x=$(/bin/echo "$contents" | /bin/grep "LEFT_ANALOG")
	x=$(/bin/echo "$x" | /bin/sed 's/LEFT_ANALOG=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif [ "$x" == "W:A:S:D" ] || [ "$x" == "w:a:s:d" ]; then
		/bin/echo "KEY_A:KEY_D"
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	LEFTANALOG_Y=$(
if $(/bin/echo "$contents" | /bin/grep -q "LEFT_ANALOG"); then
	x=$(/bin/echo "$contents" | /bin/grep "LEFT_ANALOG")
	x=$(/bin/echo "$x" | /bin/sed 's/LEFT_ANALOG=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_Y:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif [ "$x" == "W:A:S:D" ] || [ "$x" == "w:a:s:d" ]; then
		/bin/echo "KEY_W:KEY_S"
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	RIGHTANALOG_X=$(
if $(/bin/echo "$contents" | /bin/grep -q "RIGHT_ANALOG"); then
	x=$(/bin/echo "$contents" | /bin/grep "RIGHT_ANALOG")
	x=$(/bin/echo "$x" | /bin/sed 's/RIGHT_ANALOG=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif [ "$x" == "W:A:S:D" ] || [ "$x" == "w:a:s:d" ]; then
		/bin/echo "KEY_A:KEY_D"
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	RIGHTANALOG_Y=$(
if $(/bin/echo "$contents" | /bin/grep -q "RIGHT_ANALOG"); then
	x=$(/bin/echo "$contents" | /bin/grep "RIGHT_ANALOG")
	x=$(/bin/echo "$x" | /bin/sed 's/RIGHT_ANALOG=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_Y:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif [ "$x" == "W:A:S:D" ] || [ "$x" == "w:a:s:d" ]; then
		/bin/echo "KEY_W:KEY_S"
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	LEFT_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "LEFT_STICK_BUTTON"); then
	x=$(/bin/echo "$contents" | /bin/grep "LEFT_STICK_BUTTON")
	x=$(/bin/echo "$x" | /bin/sed 's/LEFT_STICK_BUTTON=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	RIGHT_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "RIGHT_STICK_BUTTON"); then
	x=$(/bin/echo "$contents" | /bin/grep "RIGHT_STICK_BUTTON")
	x=$(/bin/echo "$x" | /bin/sed 's/RIGHT_STICK_BUTTON=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	RIGHT_BUMP=$(
if $(/bin/echo "$contents" | /bin/grep -q "RIGHT_BUMPER"); then
	x=$(/bin/echo "$contents" | /bin/grep "RIGHT_BUMPER")
	x=$(/bin/echo "$x" | /bin/sed 's/RIGHT_BUMPER=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	LEFT_BUMP=$(
if $(/bin/echo "$contents" | /bin/grep -q "LEFT_BUMPER"); then
	x=$(/bin/echo "$contents" | /bin/grep "LEFT_BUMPER")
	x=$(/bin/echo "$x" | /bin/sed 's/LEFT_BUMPER=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	RIGHT_TRIG=$(
if $(/bin/echo "$contents" | /bin/grep -q "RIGHT_TRIGGER"); then
	x=$(/bin/echo "$contents" | /bin/grep "RIGHT_TRIGGER")
	x=$(/bin/echo "$x" | /bin/sed 's/RIGHT_TRIGGER=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	LEFT_TRIG=$(
if $(/bin/echo "$contents" | /bin/grep -q "LEFT_TRIGGER"); then
	x=$(/bin/echo "$contents" | /bin/grep "LEFT_TRIGGER")
	x=$(/bin/echo "$x" | /bin/sed 's/LEFT_TRIGGER=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	A_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "A="); then
	x=$(/bin/echo "$contents" | /bin/grep "A=")
	x=$(/bin/echo "$x" | /bin/sed 's/A=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	B_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "B="); then
	x=$(/bin/echo "$contents" | /bin/grep "B=")
	x=$(/bin/echo "$x" | /bin/sed 's/B=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	X_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "X="); then
	x=$(/bin/echo "$contents" | /bin/grep "X=")
	x=$(/bin/echo "$x" | /bin/sed 's/X=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	Y_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "Y="); then
	x=$(/bin/echo "$contents" | /bin/grep "Y=")
	x=$(/bin/echo "$x" | /bin/sed 's/Y=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	HOME_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "MENU"); then
	x=$(/bin/echo "$contents" | /bin/grep "MENU")
	x=$(/bin/echo "$x" | /bin/sed 's/MENU=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	START_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "START"); then
	x=$(/bin/echo "$contents" | /bin/grep "START")
	x=$(/bin/echo "$x" | /bin/sed 's/START=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	BACK_BUT=$(
if $(/bin/echo "$contents" | /bin/grep -q "BACK"); then
	x=$(/bin/echo "$contents" | /bin/grep "BACK")
	x=$(/bin/echo "$x" | /bin/sed 's/BACK=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	UP=$(
if $(/bin/echo "$contents" | /bin/grep -q "UP"); then
	x=$(/bin/echo "$contents" | /bin/grep "UP")
	x=$(/bin/echo "$x" | /bin/sed 's/UP=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	DOWN=$(
if $(/bin/echo "$contents" | /bin/grep -q "DOWN"); then
	x=$(/bin/echo "$contents" | /bin/grep "DOWN")
	x=$(/bin/echo "$x" | /bin/sed 's/DOWN=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	LEFT=$(
if $(/bin/echo "$contents" | /bin/grep -q "LEFT="); then
	x=$(/bin/echo "$contents" | /bin/grep "LEFT=")
	x=$(/bin/echo "$x" | /bin/sed 's/LEFT=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
	RIGHT=$(
if $(/bin/echo "$contents" | /bin/grep -q "RIGHT="); then
	x=$(/bin/echo "$contents" | /bin/grep "RIGHT=")
	x=$(/bin/echo "$x" | /bin/sed 's/RIGHT=//g')
	if [ "$x" == "void" ] || [ "$x" == "null" ] || [ "$x" == " " ]; then
		/bin/echo "void"
	elif [ "$x" == "MOUSE" ] || [ "$x" == "mouse" ]; then
		/bin/echo "REL_X:20"
	elif $( /bin/echo "$x" | /bin/grep -q "CLICK_"); then
		/bin/echo "$x" | /bin/sed 's/CLICK_/BTN_/g'
	elif [ "$x" == "TAB" ] || [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ] || [ "$x" == "ESC" ]; then
		if [ "$x" == "SHIFT" ] || [ "$x" == "CTRL" ] || [ "$x" == "ALT" ]; then
			/bin/echo "KEY_LEFT$x"
		else
			/bin/echo "KEY_$x"
		fi
	elif $(/bin/echo "$x" | /bin/grep -q '[[:alnum:]]'); then
		/bin/echo "KEY_$x"
	else
		/bin/echo "void"
	fi
else
	/bin/echo "void"
fi)
else
	#set up default layout
	LEFTANALOG_X="KEY_A:KEY_D"
	LEFTANALOG_Y="KEY_W:KEY_S"
	RIGHTANALOG_X="REL_X:20"
	RIGHTANALOG_Y="REL_Y:20"
	LEFT_BUT="KEY_LEFTSHIFT"
	RIGHT_BUT="KEY_LEFTCTRL"
	LEFT_BUMP="KEY_Q"
	RIGHT_BUMP="KEY_E"
	LEFT_TRIG="BTN_RIGHT"
	RIGHT_TRIG="BTN_LEFT"
	A_BUT="KEY_SPACE"
	B_BUT="KEY_C"
	X_BUT="KEY_1"
	Y_BUT="KEY_R"
	HOME_BUT="void"
	START_BUT="KEY_ENTER"
	BACK_BUT="KEY_ESC"
	UP="BTN_MIDDLE"
	DOWN="KEY_TAB"
	LEFT="KEY_4"
	RIGHT="KEY_B"
fi
inf=1
while [ "$inf" == "1" ]; do
#scan usb devices and get list of Product:Vendor IDs (PVIDs)
	/bin/sleep 0.1s
	#gain VID/PID
	usb=$(lsusb | /bin/sed -e 's/.*ID \([a-f0-9]\+:[a-f0-9]\+\).*/\1/g')
	/bin/rm $usb_loc
	#current USB state
	/bin/echo "$usb" >> $usb_loc
	#check to see if any of them are already mounted
	for y in $usb; do
		/bin/sleep 0.1s
		/bin/echo $mounted | /bin/grep  -q -e "$y" && /bin/sed -i "/\b\($y\)\b/d" $usb_loc && usb=$(/bin/cat $usb_loc)
	done
	{
		#check for typical support from xboxdrv and mount the countroller in that manner if it is supported
		for y in $usb; do
			/bin/sleep 0.1s
			/bin/echo $supported | /bin/grep  -q -e "$y" && (/usr/bin/pkexec /usr/bin/xboxdrv --detach-kernel-driver &) && /bin/echo "$y" >> $mounted_loc && mounted=$(/bin/cat $mounted_loc)
		done
	} || {
		#if the above method fails, attempt the custom method (mapping the controller keys to keyboard keys so it basicly emulates a keyboard)
		for y in $usb; do
			/bin/sleep 0.1s
			/bin/echo "$custom_add" | /bin/grep  -q -e "$y" && (/usr/bin/pkexec /usr/bin/xboxdrv --detach-kernel-driver -s --device-name "Game Pad" --device-by-id "$y" --type xbox360 --deadzone 4000 --dpad-as-button --trigger-as-button --ui-axismap "x2=$RIGHTANALOG_X,y2=$RIGHTANALOG_Y,x1=$LEFTANALOG_X,y1=$LEFTANALOG_Y" --ui-buttonmap "tl=$LEFT_BUT,tr=$RIGHT_BUT" --ui-buttonmap "a=$A_BUT,b=$B_BUT,x=$X_BUT,y=$Y_BUT" --ui-buttonmap "lb=$LEFT_BUMP,rb=$RIGHT_BUMP" --ui-buttonmap "lt=$LEFT_TRIG,rt=$RIGHT_TRIG" --ui-buttonmap "dl=$LEFT,dr=$RIGHT,du=$UP,dd=$DOWN" --ui-buttonmap "back=$BACK_BUT,start=$START_BUT,guide=$HOME_BUT" &) && /bin/echo "$y" >> $mounted_loc && mounted=$(/bin/cat $mounted_loc)
		done
	} || {
		#clear it's sort of cache on the internal drive
		/bin/rm $mounted_loc
		/bin/echo "0000:0000" >> $mounted_loc
	}
	#modify the running log of what is mounted
	/bin/echo "$mounted" >> "$edit"
	for f in $mounted; do
		/bin/sleep 0.1s
		(/bin/echo "$usb" | /bin/grep  -q -e "$f") || /bin/sed -i "/\b\($f\)\b/d" $edit
	done
	#update the log in memory
	mounted=$(/bin/cat $edit)
	#clear out needless olf files
	/bin/rm "$edit"
done
