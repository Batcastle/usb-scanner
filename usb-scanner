#!/bin/bash
# -*- coding: utf-8 -*-
#
#  usb-scanner
#  
#  Copyright 2019 Thomas Castleman <draugeros@gmail.com>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#variable pre-assignment
VERSION="2.8.3"
cache="/lib/usb-scanner"
usb_loc="$cache/usb.list"
mounted_loc="$cache/mounted.list"
mounted=$(cat $mounted_loc)
custom_add=$(cat "$cache/custom_add.list")
supported=$(cat "$cache/supported.list")
edit="$cache/edit.list"
help="usb-scanner, version $VERSION

Options:
-d, --daemon	Run usb-scanner in the background as a daemon
-h. --help		Show this help dialogue and exit
-v, --version	Print current version and exit

usb-scanner is an easy to hack to have more or less performance,
or to add support for a specific controller

To change it's performance, simply run 'sudo nano /bin/usb-scanner' and
change the number of 'sleep' commands in the file

To add support (keep in may this may not work for all controllers)
run 'lsusb' with your controller hooked up, determine which line
that gets printed out is about your controller, and copy-paste the
8-digit code with a colon (:) in the middle (including the colon)
into the file $cache/custom_add.list"
#Option handling
if [ "$1" == "--version" ] || [ "$1" == "-v" ]; then
	echo -e "\n$VERSION\n"
	exit 0
elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
	echo -e "\n$help\n"
	exit 0
elif [ "$1" == "--daemon" ] || [ "$1" == "-d" ]; then
	echo -e "\nDaemon Starting . . .\n"
	usb-scanner &
	pid="$!"
	echo -e "\nDaemon Running. Kill it with \'kill $pid\' or \"killall usb-scanner\"\n"
	exit 0
fi
#check for layout.conf file, load default layout if there is none
if [ -f $HOME/.xboxdrv/layout.conf ]; then
	#parse and load file
	exit 2
else
	#set up default layout
	LEFTANALOG_X="KEY_A:KEY_D"
	LEFTANALOG_Y="KEY_W:KEY_S"
	RIGHTANALOG_X="REL_X:20"
	RIGHTANALOG_Y="REL_Y:20"
	LEFT_BUT="KEY_LEFTSHIFT"
	RIGHT_BUT="KEY_LEFTCTRL"
	LEFT_BUMP="KEY_Q"
	RIGHT_BUMP="KEY_E"
	LEFT_TRIG="BTN_RIGHT"
	RIGHT_TRIG="BTN_LEFT"
	A_BUT="KEY_SPACE"
	B_BUT="KEY_C"
	X_BUT="KEY_1"
	Y_BUT="KEY_R"
	HOME_BUT="void"
	START_BUT="KEY_ENTER"
	BACK_BUT="KEY_ESC"
	UP="BTN_MIDDLE"
	DOWN="KEY_TAB"
	LEFT="KEY_4"
	RIGHT="KEY_B"
fi
#<<<<<<< reorganize
inf=1
while [ "$inf" == "1" ]; do
#=======
#scan usb devices and get list of Product:Vendor IDs (PVIDs)
#>>>>>>> master
	sleep 0.1s
	#gain VID/PID
	usb=$(lsusb | sed -e 's/.*ID \([a-f0-9]\+:[a-f0-9]\+\).*/\1/g')
	rm $usb_loc
	#current USB state
	echo "$usb" >> $usb_loc
	#check to see if any of them are already mounted
	for y in $usb; do
		sleep 0.1s
		echo $mounted | grep  -q -e "$y" && sed -i "/\b\($y\)\b/d" $usb_loc && usb=$(cat $usb_loc)
	done
	{
		#check for typical support from xboxdrv and mount the countroller in that manner if it is supported
		for y in $usb; do
			sleep 0.1s
			echo $supported | grep  -q -e "$y" && (pkexec xboxdrv --detach-kernel-driver &) && echo "$y" >> $mounted_loc && mounted=$(cat $mounted_loc)
		done
	} || {
		#if the above method fails, attempt the custom method (mapping the controller keys to keyboard keys so it basicly emulates a keyboard)
		for y in $usb; do
			sleep 0.1s
			echo "$custom_add" | grep  -q -e "$y" && (pkexec xboxdrv --detach-kernel-driver -s --device-name "Game Pad" --device-by-id "$y" --type xbox360 --deadzone 4000 --dpad-as-button --trigger-as-button --ui-axismap "x2=$RIGHTANALOG_X,y2=$RIGHTANALOG_Y,x1=$LEFTANALOG_X,y1=$LEFTANALOG_Y" --ui-buttonmap "tl=$LEFT_BUT,tr=$RIGHT_BUT" --ui-buttonmap "a=$A_BUT,b=$B_BUT,x=$X_BUT,y=$Y_BUT" --ui-buttonmap "lb=$LEFT_BUMP,rb=$RIGHT_BUMP" --ui-buttonmap "lt=$LEFT_TRIG,rt=$RIGHT_TRIG" --ui-buttonmap "dl=$LEFT,dr=$RIGHT,du=$UP,dd=$DOWN" --ui-buttonmap "back=$BACK_BUT,start=$START_BUT,guide=$HOME_BUT" &) && echo "$y" >> $mounted_loc && mounted=$(cat $mounted_loc)
		done
	} || {
		#clear it's sort of cache on the internal drive
		rm $mounted_loc
		echo "0000:0000" >> $mounted_loc
	}
	#modify the running log of what is mounted
	echo "$mounted" >> "$edit"
	for f in $mounted; do
		sleep 0.1s
		(echo "$usb" | grep  -q -e "$f") || sed -i "/\b\($f\)\b/d" $edit
	done
	#update the log in memory
	mounted=$(cat $edit)
	#clear out needless olf files
	rm "$edit"
done
